#!/bin/bash
################################################################################
# Script Name : uichat
# Author : Mitch Winkle, AB4MW
# Version : 1.08
# Date : 06 May 2022
# License : Gnu GPL v3.0
# Description : The UIChat program for SELCAL chats over AX.25 UI frames.
################################################################################
#This file is part of UIChat.
# Copyright 2015-2022 Mitch Winkle
#
#   UIChat is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   UIChat is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with UIChat (COPYING text file).  If not, see <http://www.gnu.org/licenses/>
################################################################################
# Uichat uses beacon to send FSQCall style transmission requests
# via a native Linux AX.25 system
VER="UIChat v1.08"
if [[ "$UID" != "0" ]]; then 
	echo "USER:$USER"
	echo "You must be root to run UIChat."
	echo "try : sudo uichat"
	exit 1
fi
PROMPT="UICHAT> "
BEACON=$(which beacon 2>/dev/null)
if [[ $BEACON = "" ]]; then
	echo "The beacon tool was not found...ax25-tools must be \
installed for UIChat to function."
	exit 1
fi
RIGCTL=$(which rigctl 2>/dev/null)
if [[ $RIGCTL != "" ]]; then
	source /etc/uichatd/uichatd.rigctl
fi
UICHATD=/usr/local/bin/uichatd
CONFIG=/etc/uichatd/uichatd.conf
msgdir=/var/ax25/uichatd
# WARNING: must match what is defined in uichatd 
UICHATPIPE=/var/run/uichatpipe
# Functions
fn_sound () {
	case $1 in
		on)
			# we only want one sounding beacon
			if [[ "$soundpid" == "" ]]; then
				if [[ $SOUND_INTERVAL == "" ]]; then
					SOUND_INTERVAL=15
				fi
				$BEACON -c $mycall -d "UICHAT $digi" -t $SOUND_INTERVAL $axport "$SOUND_TEXT" &
				soundpid=$(ps ax|grep beacon|grep UICHAT|cut -c 1-6|tr -d ' ')
				echo "Sounding turned on [$soundpid]"
			fi
			;;
		off)
			if [[ $soundpid != "" ]]; then
				kill -9 $soundpid
				soundpid=''
			fi
			echo "Sounding turned off"
			;;
		*)	echo "Invalid switch, use on or off"
			;;
	esac
	echo -n "$PROMPT"
}
fn_show_heard () {
	if [[ -e $msgdir/heard ]]; then
		tac $msgdir/heard
	else
		echo "for some reason, the heard list does not exist. Creating it now..."
		touch $msgdir/heard
	fi
	echo -n "$PROMPT"
}
fn_read_message () {
	if [[ -e $msgdir/$1.msg ]]; then
		cat $msgdir/$1.msg|more
	else
		echo "no such message file"
	fi
	echo -n "$PROMPT"
}
fn_kill_message () {
	if [[ -e $msgdir/$1.msg ]]; then
		rm -f $msgdir/$1.msg
		echo "$1 message file removed"
	else
		echo "no such message file"
	fi
	echo -n "$PROMPT"
}
fn_list_messages () {
	if [ -e $msgdir/*.msg ]; then 
		ls -l $msgdir/*.msg|cut -f 5 -d '/'| cut -f 1 -d '.'
	else
		echo "no message files"
	fi
	echo -n "$PROMPT"
}
fn_axport () {
	if [[ $1 == "" ]]; then
		echo "current port: $axport"
		echo -n "$PROMPT"
	else
		dummy=`grep ^$1 /etc/ax25/axports`
		if [ $? -eq 0 ]; then
			kill -SIGTERM $uichatd_pid > /dev/null
			echo "current port:$axport"
			axport=$1
			echo "new port: $axport"
			$UICHATD $mycall $axport $digi &
			uichatd_pid=$!
		else
			echo "that axport does not exist"
		fi
		paclen=$(cat /etc/ax25/axports|grep "^${axport}"|xargs|cut -f 4 -d ' ')
		 if [[ $paclen == "" ]]; then
		 	 paclen=236
		 	 echo "Could not read paclen, so setting to 236 as a default."
		 	 echo "This may cause problems if your paclen is lower than 236"
		 	 echo "and your message length is longer than your actual paclen."
		 fi
		echo -n "$PROMPT"
	fi
}
fn_digi () {
	# note the special case where digi='show'
	case $1 in
	'') 
		# empty param means just show me the digi!
		echo "Current digi: ${digi:-<none>}"
		;;
	clear)
		# if we got a "clear" param we will erase the current digi
		digi=''
		echo "New digi : <none>"
		kill -SIGTERM $uichatd_pid > /dev/null
		$UICHATD $mycall $axport $digi &
		uichatd_pid=$!
		;;
	*)
		digi="${1}"
		if [[ ${#digi} -lt 3 ]]; then
			echo "must supply a valid digi name"
		else
			echo "New digi : ${digi}"
			kill -SIGTERM $uichatd_pid > /dev/null
			$UICHATD $mycall $axport $digi &
			uichatd_pid=$!
		fi
	esac
	echo -n "$PROMPT"	
}
fn_status () {
	if [[ $1 == "" ]]; then
		echo "Current Status : $STATUS"
		echo -n "$PROMPT"
	else
		# we only change the current status of the running
		# uichat because we want it to default to the configuration
		# file value at startup
		echo "Current Status : $STATUS"
		kill -SIGTERM $uichatd_pid > /dev/null
		sed -i /^STATUS/d $CONFIG
		echo "STATUS=${1}" >> $CONFIG
		STATUS="${1}"
		echo "New Status : ${1}"
		$UICHATD $mycall $axport $digi &
		uichatd_pid=$!
		echo -n "$PROMPT"
	fi
}
fn_control_c () {
	if [[ $soundpid != "" ]]; then
		kill -9 $soundpid
	fi
	sed -i /^STATUS/d $CONFIG
	echo "STATUS='$mycall online...'" >> $CONFIG
	[ -e $UICHATPIPE ] && rm -f $UICHATPIPE
	kill -SIGTERM $uichatd_pid
	exit $?
}
# Use uichatd to listen for incoming calls
source $CONFIG
paclen=$(cat /etc/ax25/axports|grep "^${axport}"|xargs|cut -f 4 -d ' ')
# normalize mycall to lower case
if [[ $mycall =~ [A-Z] ]]; then
	mycall=`echo $mycall|tr 'A-Z' 'a-z'`
fi
if [ "$digi" != "" ]; then
	digi=" $digi"
fi
# Missing parameters triggers warning and exit 1
if [[ $mycall == "" || $axport == "" ]]; then
	echo "Configuration file missing!"
	echo "Looking for /etc/uichatd/uichatd.conf"
	exit 1
fi
trap fn_control_c SIGINT
trap fn_control_c SIGTERM
# Listen for uichat commands for my call and act
$UICHATD $mycall $axport $digi &
uichatd_pid=$!
# Now start the loop with an instruction on how to exit the program and get help
echo "$VER"
echo "Hello $NAME.  Station $mycall is using UICHat on axport $axport."
echo "Enter "?" for Help or "quit" to end the program"
echo -n "$PROMPT"
while true 
do
	read prefix msg
	case $prefix in
		rig)
			if [[ $RIGCTL != "" ]]; then
				if [[ $rigctlciv != "" ]]; then
					$RIGCTL -m $rigctlnum -r $rigctlport -c $rigctlciv $msg
				else
					$RIGCTL -m $rigctlnum -r $rigctlport $msg
				fi
			else
				echo "RIGCTL does not appear to be installed..."
			fi
			echo -n "$PROMPT"
			;;
		config)
			grep ^[^#] $CONFIG
			echo -n "$PROMPT"
			;;
		heard)
			fn_show_heard
			;;
		
		clear)
			clear
			echo -n "$PROMPT"
			;;
		list)
			fn_list_messages
			;;
		read)	
			fn_read_message "$msg"
			msg=''
			;;
		kill)	
			fn_kill_message "$msg"
			msg=''
			;;
		axport)
			fn_axport "$msg"
			msg=''
			;;
		digi)
			fn_digi "$msg"
			msg=''
			;;
		sound)
			fn_sound "$msg"
			msg=''
			;;
		status)
			fn_status "$msg"
			msg=''
			;;
		[Qq][Uu][Ii][Tt]) 
			fn_control_c
			;;
		'?')
echo " COMMAND LIST:"
echo  -e " All commands must be of the format of one of the lines below.\n"
echo " allcall <message text>       : Send a message to all UICHAT stations on frequency"
echo " cqcqcq <message text>        : Send a cq query to all UICHAT stations on frequency"
echo " callsign <message text>      : Send message to <callsign> station"
echo " callsign|<message text>      : Send an ALERT message ALERT to the <callsign> station"
echo " callsign#<message>           : Send a message to the <callsign> station"
echo "                                 and write it to a file in THEIR"
echo "                                 /var/ax25/uichatd/<your_callsign>.msg file"
echo " callsign!<message text>      : <callsign> station should repeat the <message_text> on frequency"
echo " callsign;dest_call <message> : Relay the content of message through the"
echo "                                <callsign> station to the <dest_call> station"
echo " callsign?       : Send an \"Are you there?\" query to the <callsign> station"
echo " callsign&       : Request station information from the <callsign> station"
echo " callsign\$       : Request a heard list from the <callsign> station"
echo " callsign@       : Request QTH information from the <callsign> station"
echo " callsign^       : Request the software version from the <callsign> station"
echo " clear           : Clear the screen"
echo " heard           : Show the local heard list"
echo " list            : Lists the message files that have been received"
echo " show <msg call> : Supply a call sign to display the contents of the local message file."
echo " kill <msg call> : Supply a call sign to delete the local msg file"
echo " axport [axport] : Display or change axport to listen on"
echo " digi <digi_call>: Delete or change digi to use.  \"digi\" means display digi"
echo "                  \"digi clear\" means stop using the digi"
echo "                  \"digi <digi_call>\" means start using this digi"
echo " sound <on|off>  : Toggle sounding \"on\" or \"off\" (default 15 minute period)"
echo " status [\"text\"] : Get/Set the current status text to answer the \"?\" action command"
echo " config          : Show the current configuration file"
echo " rig             : See RIGCTL file in source distro for help"
echo -e " quit            : Exit UIChat\n"

			echo -n "$PROMPT"
			;;

			*)
	 		# there must be at least a 3 character special event call
			# sign plus action character in order to transmit
			if [[ ${#prefix} -gt 3 ]]; then	
				char_count=$(echo "$prefix $msg" | wc -m)
				if [[ $char_count -le $paclen ]]; then
					$BEACON -c $mycall -d "UICHAT $digi" -s $axport "$prefix $msg"
					msg=''
				else
					echo -e "\nToo many characters [$char_count].  Must be $paclen or less."
				fi
			fi
			echo -n "$PROMPT"
			;;
	esac
done
exit 0
